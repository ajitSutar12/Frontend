{"version":3,"sources":["./src/app/theme/auth/resetpassword/resetpassword-routing.module.ts","./src/app/theme/auth/resetpassword/resetpassword.component.ts","./src/app/theme/auth/resetpassword/resetpassword.component.html","./src/app/theme/auth/resetpassword/resetpassword.module.ts"],"names":[],"mappings":"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","file":"resetpassword-resetpassword-module.js","sourcesContent":["import {NgModule} from '@angular/core';\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport {ResetpasswordComponent} from './resetpassword.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ResetpasswordComponent,\r\n    data: {\r\n      title: 'resetpassword'\r\n    }\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ResetpasswordRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport Swal from 'sweetalert2';\r\nimport { AuthService } from '../auth.service';\r\nimport { NgPasswordValidatorOptions } from \"ng-password-validator\";\r\n\r\n@Component({\r\n  selector: 'app-resetpassword',\r\n  templateUrl: './resetpassword.component.html',\r\n  styleUrls: ['./resetpassword.component.scss']\r\n})\r\nexport class ResetpasswordComponent implements OnInit {\r\n  inputValue: string;\r\n  options: NgPasswordValidatorOptions = {\r\n    placement: \"bottom\",\r\n    \"animation-duration\": 500\r\n};\r\n  currentPassword : any;\r\n  newPassword : any;\r\n  confirmPassword : any;\r\n  email:any;\r\n  toastr: any;\r\n\r\n\r\n  constructor(private _authService : AuthService,private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    document.querySelector('body').setAttribute('themebg-pattern', 'theme1');\r\n  }\r\n\r\n  isValid(event: boolean): void {\r\n    if (this.inputValue && this.inputValue.length) {\r\n        if (event) {\r\n            this.toastr.success(\"Password is Valid.\", \"Successful!\");\r\n        } else {\r\n            this.toastr.error(\"Password is invalid.\", \"Error!\");\r\n        }\r\n    }\r\n\r\n}\r\n\r\nonInput(event: any): void {\r\n  this.inputValue = event.target.value;\r\n}\r\n\r\n//function to confirm password\r\ncheckPassword() {\r\n  let  password1 = ((document.getElementById(\"Create_Password\") as HTMLInputElement).value);\r\n  let password2 = ((document.getElementById(\"Confirm_Password\") as HTMLInputElement).value);\r\n \r\n   // If password not entered\r\n   if (password1 == ''){\r\n     Swal.fire(\"Warning!\", \"Please enter Password !\", \"warning\");\r\n \r\n   }\r\n \r\n         \r\n   // If confirm password not entered\r\n   else if (password2 == ''){\r\n     Swal.fire(\"Warning!\", \"Please enter confirm password!\", \"warning\");\r\n \r\n   }\r\n       // alert (\"Please enter confirm password\");\r\n         \r\n   // If Not same return False.    \r\n   else if (password1 != password2) {\r\n     Swal.fire(\"Warning!\", \"Password did not match: Please try again...!\", \"warning\");      \r\n   }\r\n \r\n   // If same return True.\r\n   // else{\r\n   //   Swal.fire(\"Success!\", \"Password Match!\", \"success\");\r\n \r\n   //     // alert(\"Password Match: Welcome to GeeksforGeeks!\")\r\n       \r\n   // }\r\n }\r\n \r\n  //reset password\r\n  resetpassword(){\r\n    if(this.currentPassword == ''){\r\n      Swal.fire('Error!', 'Please insert you current password', 'error');\r\n    }\r\n    else if(this.newPassword != this.confirmPassword){\r\n      Swal.fire('Error!', 'Your password not matched', 'error');\r\n    }else{\r\n\r\n      let resetpassword = {\r\n        'currentPassword' : this.currentPassword,\r\n        'newPassword' : this.newPassword,\r\n        'confirmPassword' :  this.confirmPassword,\r\n        'email': this.email\r\n      }\r\n\r\n      this._authService.resetPassword(resetpassword).subscribe(data=>{\r\n        Swal.fire('Success!', 'Password Reset Successfully', 'success');\r\n        this.router.navigate(['/auth/login/simple']);\r\n\r\n      },error=>{\r\n        Swal.fire('Error!', error.error.message, 'error');\r\n\r\n      })\r\n    }\r\n  }\r\n}\r\n","<section class=\"login-block\">\r\n    <!-- Container-fluid starts -->\r\n    <div class=\"container-fluid\">\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n                <!-- Authentication card start -->\r\n\r\n                <form action=\"javascript:\">\r\n                    <!-- <div class=\"text-center\">\r\n                            <img src=\"assets/images/logo.png\" alt=\"logo.png\">\r\n                         </div> -->\r\n                    <div class=\"auth-box card\">\r\n                        <div class=\"card-block\">\r\n                            <div class=\"row m-b-20\">\r\n                                <div class=\"col-md-12\">\r\n                                    <h3 class=\"text-left\">Reset your password</h3>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"row\">\r\n                                <div class=\"col-sm\">\r\n                                    <div class=\"form-group input-group\">\r\n                                        <span class=\"border-lable-flt\">\r\n                                            <input type=\"email\" name=\"AC_EMAILID\" class=\"form-control\" placeholder=\" \"\r\n                                                pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.com$\" title=\"Enter valid Email\"\r\n                                                id=\"AC_EMAILID\" [(ngModel)]=\"email\" >\r\n                                            <label for=\"AC_EMAILID\"> Registered Email id</label>\r\n                                        </span>\r\n                                    </div>\r\n                                    <!-- <div class=\"form-group form-primary form-static-label\"\r\n                                        *ngIf=\"angForm.controls['AC_EMAILID'].invalid && (angForm.controls['AC_EMAILID'].dirty || angForm.controls['AC_EMAILID'].touched)\"\r\n                                        class=\"alert alert-danger\">\r\n                                        <div *ngIf=\"angForm.controls['AC_EMAILID'].errors?.pattern\">\r\n                                            Registered Email id\r\n                                        </div>\r\n                                    </div> -->\r\n                                </div>\r\n                            </div>\r\n                            <!-- <div class=\"form-group form-primary\">\r\n                                <input type=\"text\" name=\"user-name\" class=\"form-control\" required=\"\" [(ngModel)]=\"email\">\r\n                                <span class=\"form-bar\"></span>\r\n                                <label class=\"float-label\">Registered Email id</label>\r\n                            </div> -->\r\n                            <div class=\"row\">\r\n                                <div class=\"col-sm\">\r\n                                    <div class=\"form-group input-group\">\r\n                                        <span class=\"border-lable-flt\">\r\n                                            <input type=\"email\" name=\"currentPassword\" class=\"form-control\" placeholder=\" \"\r\n                                                title=\"Enter valid Email\"\r\n                                                id=\"Current_Password\"  [NgPasswordValidator]=\"options\" (valid)=\"isValid($event)\" (keyup)=\"onInput($event)\"\r\n                                                 [(ngModel)]=\"currentPassword\" >\r\n                                            <label for=\"Current_Password\"> Current Password</label>\r\n                                        </span>\r\n                                    </div>\r\n                                    <!-- <div class=\"form-group form-primary form-static-label\"\r\n                                        *ngIf=\"angForm.controls['AC_EMAILID'].invalid && (angForm.controls['AC_EMAILID'].dirty || angForm.controls['AC_EMAILID'].touched)\"\r\n                                        class=\"alert alert-danger\">\r\n                                        <div *ngIf=\"angForm.controls['AC_EMAILID'].errors?.pattern\">\r\n                                            Registered Email id\r\n                                        </div>\r\n                                    </div> -->\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <!-- <div class=\"form-group form-primary\">\r\n                                <input type=\"text\" name=\"user-name\" class=\"form-control\" required=\"\" [(ngModel)]=\"currentPassword\">\r\n                                <span class=\"form-bar\"></span>\r\n                                <label class=\"float-label\">Current Password</label>\r\n                            </div> -->\r\n                            <div class=\"row\">\r\n                                <div class=\"col-sm-12\">\r\n                                    <div class=\"form-group input-group\">\r\n                                      <span class=\"border-lable-flt\">\r\n                                        <input type=\"password\" name=\"Create_Password\"\r\n                                          pattern=\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*_=+-]).{8,12}$\"\r\n                                          minlength=\"4\" \r\n                                          class=\"form-control\"  [NgPasswordValidator]=\"options\" (valid)=\"isValid($event)\" (keyup)=\"onInput($event)\" placeholder=\" \" id=\"Create_Password\"\r\n                                          required [(ngModel)]=\"newPassword\">\r\n                                        <label for=\"Create_Password\">New Password<sub class=\"required\">* </sub></label>\r\n                                      </span>\r\n                                    </div>\r\n                                  \r\n        \r\n                                  </div>\r\n                            </div>\r\n                            <div class=\"row\">\r\n\r\n\r\n                                <div class=\"col-sm\">\r\n                                  <div class=\"form-group input-group\">\r\n                                    <span class=\"border-lable-flt\">\r\n                                      <input type=\"password\" name=\"Confirm_Password\"\r\n                                        pattern=\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*_=+-]).{8,12}$\"\r\n                                        class=\"form-control\" placeholder=\" \" id=\"Confirm_Password\" (focusout)=\"checkPassword() \"\r\n                                        [NgPasswordValidator]=\"options\" (valid)=\"isValid($event)\" (keyup)=\"onInput($event)\"\r\n                                        [(ngModel)]=\"confirmPassword\">\r\n                                      <label for=\"Confirm_Password\">Confirm Password<sub class=\"required\">* </sub></label>\r\n                                    </span>\r\n                                  </div>\r\n                                 \r\n                                </div>\r\n          \r\n                              </div>\r\n          \r\n                            <!-- <div class=\"form-group form-primary\">\r\n                                <input type=\"text\" name=\"new-pass\" class=\"form-control\" required=\"\" [(ngModel)]=\"newPassword\">\r\n                                <span class=\"form-bar\"></span>\r\n                                <label class=\"float-label\">New Password</label>\r\n                            </div> -->\r\n                            <!-- <div class=\"form-group form-primary\">\r\n                                <input type=\"text\" name=\"Confirm-pass\" class=\"form-control\" required=\"\" [(ngModel)]=\"confirmPassword\">\r\n                                <span class=\"form-bar\"></span>\r\n                                <label class=\"float-label\">Confirm Password</label>\r\n                            </div> -->\r\n\r\n\r\n                            <div class=\"row\">\r\n                                <div class=\"col-md-12\">\r\n                                    <button type=\"button\"\r\n                                        class=\"btn btn-primary btn-md btn-block waves-light text-center m-b-20 ripple\" (click)=\"resetpassword()\">Reset\r\n                                        Password</button>\r\n                                </div>\r\n                            </div>\r\n                            <!-- <p class=\"f-w-600 text-right\">Back to <a [routerLink]=\"['/auth/login/simple']\">Login.</a></p> -->\r\n                            <div class=\"row\">\r\n                                <div class=\"col-md-8\">\r\n                                    <!-- <p class=\"text-inverse text-left m-b-0\">Thank you.</p> -->\r\n                                    <!-- <p class=\"text-inverse text-left\"><a [routerLink]=\"['/dashboard/default']\"><b>Back to website</b></a></p> -->\r\n                                </div>\r\n                                <div class=\"col-md-4\">\r\n                                    <img src=\"assets/images/comp.png\" alt=\"small-logo.png\">\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <!-- end of col-sm-12 -->\r\n        </div>\r\n        <!-- end of row -->\r\n    </div>\r\n    <!-- end of container-fluid -->\r\n</section>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ResetpasswordComponent } from './resetpassword.component';\r\nimport {ResetpasswordRoutingModule} from './resetpassword-routing.module';\r\nimport {SharedModule} from '../../../shared/shared.module';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgPasswordValidatorModule } from 'ng-password-validator';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ResetpasswordRoutingModule,\r\n    SharedModule,\r\n    FormsModule,\r\n    NgPasswordValidatorModule\r\n  ],\r\n  declarations: [ResetpasswordComponent]\r\n})\r\nexport class ResetpasswordModule { }\r\n"],"sourceRoot":"webpack:///"}