{"version":3,"sources":["./src/app/theme/auth/auth-routing.module.ts","./src/app/theme/auth/auth.guard.ts","./src/app/theme/auth/auth.interceptor.service.ts","./src/app/theme/auth/auth.module.ts","./src/app/theme/auth/auth.service.ts"],"names":[],"mappings":"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","file":"theme-auth-auth-module.js","sourcesContent":["import {NgModule} from '@angular/core';\r\nimport {RouterModule, Routes} from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    data: {\r\n      title: 'Authentication',\r\n      status: false\r\n    },\r\n    children: [\r\n      {\r\n        path: 'login',\r\n        loadChildren: () => import('./login/login.module').then(m => m.LoginModule)\r\n      },\r\n      {\r\n        path: 'registration',\r\n        loadChildren: () => import('./registration/registration.module').then(m => m.RegistrationModule)\r\n      },\r\n      {\r\n        path: 'forgot',\r\n        loadChildren: () => import('./forgot/forgot.module').then(m => m.ForgotModule)\r\n      },\r\n      {\r\n        path: 'lock-screen',\r\n        loadChildren: () => import('./lock-screen/lock-screen.module').then(m => m.LockScreenModule)\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree,Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\n// import { JwtHelperService } from '@auth0/angular-jwt';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(public auth: AuthService, public router: Router) {}\r\n  private tokenExpired(token: string) {\r\n    const expiry = (JSON.parse(atob(token.split('.')[1]))).exp;\r\n    return (Math.floor((new Date).getTime() / 1000)) >= expiry;\r\n  }\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n      debugger\r\n      const token = localStorage.getItem('token');\r\n      if (this.tokenExpired(token)) {\r\n        this.router.navigate(['/auth/login/simple']);\r\n        return false;\r\n      } else {\r\n        // token valid\r\n        return true;\r\n      }\r\n  }\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpEvent, HttpResponse, HttpRequest, HttpHandler } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { ConnectionService } from 'ng-connection-service';\r\n\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthInterceptorServices implements HttpInterceptor {\r\n    isConnected = true;\r\n    noInternetConnection: boolean;\r\n\r\n    constructor(private connectionService: ConnectionService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        this.connectionService.monitor().subscribe(isConnected => {\r\n            this.isConnected = isConnected;\r\n            if (this.isConnected) {\r\n                this.noInternetConnection = false;\r\n                const token: string = localStorage.getItem('token');\r\n\r\n                if (token) {\r\n                    request = request.clone({ headers: request.headers.set('Authorization', 'Bearer ' + token) });\r\n                }\r\n\r\n                if (!request.headers.has('Content-Type')) {\r\n                    request = request.clone({ headers: request.headers.set('Content-Type', 'application/json') });\r\n                }\r\n\r\n                request = request.clone({ headers: request.headers.set('Accept', 'application/json') });\r\n\r\n                return next.handle(request).pipe(\r\n                    map((event: HttpEvent<any>) => {\r\n                        if (event instanceof HttpResponse) {\r\n                            // console.log('event--->>>', event);\r\n                        }\r\n                        return event;\r\n                    }));\r\n            }\r\n            else {\r\n                this.noInternetConnection = true;\r\n                alert('please check internet conntion')\r\n                return\r\n            }\r\n        \r\n        })\r\n        return\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {AuthRoutingModule} from './auth-routing.module';\r\nimport {SharedModule} from '../../shared/shared.module';\r\n// import { JwtHelperService, JWT_OPTIONS  } from '@auth0/angular-jwt';\r\nimport { AuthGuard } from './auth.guard';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { AuthInterceptorServices } from './auth.interceptor.service';\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    AuthRoutingModule,\r\n    SharedModule\r\n  ],\r\n  declarations: [],\r\n  providers: [\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: AuthInterceptorServices,\r\n      multi: true\r\n    },\r\n    // { provide: JWT_OPTIONS, useValue: JWT_OPTIONS },\r\n    // JwtHelperService,\r\n    AuthGuard\r\n  ] \r\n})\r\nexport class AuthModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport 'rxjs/Rx';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport {environment} from '../../../environments/environment';\r\nimport { HttpHeaders } from '@angular/common/http'; \r\n// import { JwtHelperService } from '@auth0/angular-jwt';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  base_url  =  environment.base_url;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  login(article: any): Observable<any> {\r\n    console.log(this.base_url);\r\n    let httpHeaders = new HttpHeaders({\r\n    'Content-Type' : 'application/json',\r\n    'Cache-Control': 'no-cache'\r\n      });    \r\n      let options = {\r\n      headers: httpHeaders\r\n      };        \r\n      return this.http.post<any>(this.base_url+'/auth/login', article, options);\r\n    } \r\n  }\r\n"],"sourceRoot":"webpack:///"}