{"version":3,"sources":["./src/app/theme/auth/resetpassword/resetpassword-routing.module.ts","./src/app/theme/auth/resetpassword/resetpassword.component.ts","./src/app/theme/auth/resetpassword/resetpassword.component.html","./src/app/theme/auth/resetpassword/resetpassword.module.ts"],"names":[],"mappings":"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","file":"resetpassword-resetpassword-module.js","sourcesContent":["import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {ResetpasswordComponent} from './resetpassword.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ResetpasswordComponent,\n    data: {\n      title: 'resetpassword'\n    }\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ResetpasswordRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { AuthService } from '../auth.service';\nimport { NgPasswordValidatorOptions } from \"ng-password-validator\";\n\n@Component({\n  selector: 'app-resetpassword',\n  templateUrl: './resetpassword.component.html',\n  styleUrls: ['./resetpassword.component.scss']\n})\nexport class ResetpasswordComponent implements OnInit {\n  inputValue: string;\n  options: NgPasswordValidatorOptions = {\n    placement: \"bottom\",\n    \"animation-duration\": 500\n};\n  currentPassword : any;\n  newPassword : any;\n  confirmPassword : any;\n  email:any;\n  toastr: any;\n\n\n  constructor(private _authService : AuthService,private router: Router) { }\n\n  ngOnInit(): void {\n    document.querySelector('body').setAttribute('themebg-pattern', 'theme1');\n  }\n\n  isValid(event: boolean): void {\n    if (this.inputValue && this.inputValue.length) {\n        if (event) {\n            this.toastr.success(\"Password is Valid.\", \"Successful!\");\n        } else {\n            this.toastr.error(\"Password is invalid.\", \"Error!\");\n        }\n    }\n\n}\n\nonInput(event: any): void {\n  this.inputValue = event.target.value;\n}\n\n//function to confirm password\ncheckPassword() {\n  let  password1 = ((document.getElementById(\"Create_Password\") as HTMLInputElement).value);\n  let password2 = ((document.getElementById(\"Confirm_Password\") as HTMLInputElement).value);\n \n   // If password not entered\n   if (password1 == ''){\n     Swal.fire(\"Warning!\", \"Please enter Password !\", \"warning\");\n \n   }\n \n         \n   // If confirm password not entered\n   else if (password2 == ''){\n     Swal.fire(\"Warning!\", \"Please enter confirm password!\", \"warning\");\n \n   }\n       // alert (\"Please enter confirm password\");\n         \n   // If Not same return False.    \n   else if (password1 != password2) {\n     Swal.fire(\"Warning!\", \"Password did not match: Please try again...!\", \"warning\");      \n   }\n \n   // If same return True.\n   // else{\n   //   Swal.fire(\"Success!\", \"Password Match!\", \"success\");\n \n   //     // alert(\"Password Match: Welcome to GeeksforGeeks!\")\n       \n   // }\n }\n \n  //reset password\n  resetpassword(){\n    if(this.currentPassword == ''){\n      Swal.fire('Oops!', 'Please insert you current password', 'error');\n    }\n    else if(this.newPassword != this.confirmPassword){\n      Swal.fire('Oops!', 'Your password not matched', 'error');\n    }else{\n\n      let resetpassword = {\n        'currentPassword' : this.currentPassword,\n        'newPassword' : this.newPassword,\n        'confirmPassword' :  this.confirmPassword,\n        'email': this.email\n      }\n\n      this._authService.resetPassword(resetpassword).subscribe(data=>{\n        Swal.fire('Success!', 'Password Reset Successfully', 'success');\n        this.router.navigate(['/auth/login/simple']);\n\n      },error=>{\n        Swal.fire('Oops!', error.error.message, 'error');\n\n      })\n    }\n  }\n}\n","<section class=\"login-block\">\n    <!-- Container-fluid starts -->\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <!-- Authentication card start -->\n\n                <form action=\"javascript:\">\n                    <!-- <div class=\"text-center\">\n                            <img src=\"assets/images/logo.png\" alt=\"logo.png\">\n                         </div> -->\n                    <div class=\"auth-box card\">\n                        <div class=\"card-block\">\n                            <div class=\"row m-b-20\">\n                                <div class=\"col-md-12\">\n                                    <h3 class=\"text-left\">Reset your password</h3>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-sm\">\n                                    <div class=\"form-group input-group\">\n                                        <span class=\"border-lable-flt\">\n                                            <input type=\"email\" name=\"AC_EMAILID\" class=\"form-control\" placeholder=\" \"\n                                                pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.com$\" title=\"Enter valid Email\"\n                                                id=\"AC_EMAILID\" [(ngModel)]=\"email\" >\n                                            <label for=\"AC_EMAILID\"> Registered Email id</label>\n                                        </span>\n                                    </div>\n                                    <!-- <div class=\"form-group form-primary form-static-label\"\n                                        *ngIf=\"angForm.controls['AC_EMAILID'].invalid && (angForm.controls['AC_EMAILID'].dirty || angForm.controls['AC_EMAILID'].touched)\"\n                                        class=\"alert alert-danger\">\n                                        <div *ngIf=\"angForm.controls['AC_EMAILID'].errors?.pattern\">\n                                            Registered Email id\n                                        </div>\n                                    </div> -->\n                                </div>\n                            </div>\n                            <!-- <div class=\"form-group form-primary\">\n                                <input type=\"text\" name=\"user-name\" class=\"form-control\" required=\"\" [(ngModel)]=\"email\">\n                                <span class=\"form-bar\"></span>\n                                <label class=\"float-label\">Registered Email id</label>\n                            </div> -->\n                            <div class=\"row\">\n                                <div class=\"col-sm\">\n                                    <div class=\"form-group input-group\">\n                                        <span class=\"border-lable-flt\">\n                                            <input type=\"email\" name=\"currentPassword\" class=\"form-control\" placeholder=\" \"\n                                                title=\"Enter valid Email\"\n                                                id=\"Current_Password\"  [NgPasswordValidator]=\"options\" (valid)=\"isValid($event)\" (keyup)=\"onInput($event)\"\n                                                 [(ngModel)]=\"currentPassword\" >\n                                            <label for=\"Current_Password\"> Current Password</label>\n                                        </span>\n                                    </div>\n                                    <!-- <div class=\"form-group form-primary form-static-label\"\n                                        *ngIf=\"angForm.controls['AC_EMAILID'].invalid && (angForm.controls['AC_EMAILID'].dirty || angForm.controls['AC_EMAILID'].touched)\"\n                                        class=\"alert alert-danger\">\n                                        <div *ngIf=\"angForm.controls['AC_EMAILID'].errors?.pattern\">\n                                            Registered Email id\n                                        </div>\n                                    </div> -->\n                                </div>\n                            </div>\n                            \n                            <!-- <div class=\"form-group form-primary\">\n                                <input type=\"text\" name=\"user-name\" class=\"form-control\" required=\"\" [(ngModel)]=\"currentPassword\">\n                                <span class=\"form-bar\"></span>\n                                <label class=\"float-label\">Current Password</label>\n                            </div> -->\n                            <div class=\"row\">\n                                <div class=\"col-sm-12\">\n                                    <div class=\"form-group input-group\">\n                                      <span class=\"border-lable-flt\">\n                                        <input type=\"password\" name=\"Create_Password\"\n                                          pattern=\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*_=+-]).{8,12}$\"\n                                          minlength=\"4\" \n                                          class=\"form-control\"  [NgPasswordValidator]=\"options\" (valid)=\"isValid($event)\" (keyup)=\"onInput($event)\" placeholder=\" \" id=\"Create_Password\"\n                                          required [(ngModel)]=\"newPassword\">\n                                        <label for=\"Create_Password\">New Password<sub class=\"required\">* </sub></label>\n                                      </span>\n                                    </div>\n                                  \n        \n                                  </div>\n                            </div>\n                            <div class=\"row\">\n\n\n                                <div class=\"col-sm\">\n                                  <div class=\"form-group input-group\">\n                                    <span class=\"border-lable-flt\">\n                                      <input type=\"password\" name=\"Confirm_Password\"\n                                        pattern=\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*_=+-]).{8,12}$\"\n                                        class=\"form-control\" placeholder=\" \" id=\"Confirm_Password\" (focusout)=\"checkPassword() \"\n                                        [NgPasswordValidator]=\"options\" (valid)=\"isValid($event)\" (keyup)=\"onInput($event)\"\n                                        [(ngModel)]=\"confirmPassword\">\n                                      <label for=\"Confirm_Password\">Confirm Password<sub class=\"required\">* </sub></label>\n                                    </span>\n                                  </div>\n                                 \n                                </div>\n          \n                              </div>\n          \n                            <!-- <div class=\"form-group form-primary\">\n                                <input type=\"text\" name=\"new-pass\" class=\"form-control\" required=\"\" [(ngModel)]=\"newPassword\">\n                                <span class=\"form-bar\"></span>\n                                <label class=\"float-label\">New Password</label>\n                            </div> -->\n                            <!-- <div class=\"form-group form-primary\">\n                                <input type=\"text\" name=\"Confirm-pass\" class=\"form-control\" required=\"\" [(ngModel)]=\"confirmPassword\">\n                                <span class=\"form-bar\"></span>\n                                <label class=\"float-label\">Confirm Password</label>\n                            </div> -->\n\n\n                            <div class=\"row\">\n                                <div class=\"col-md-12\">\n                                    <button type=\"button\"\n                                        class=\"btn btn-primary btn-md btn-block waves-light text-center m-b-20 ripple\" (click)=\"resetpassword()\">Reset\n                                        Password</button>\n                                </div>\n                            </div>\n                            <!-- <p class=\"f-w-600 text-right\">Back to <a [routerLink]=\"['/auth/login/simple']\">Login.</a></p> -->\n                            <div class=\"row\">\n                                <div class=\"col-md-8\">\n                                    <!-- <p class=\"text-inverse text-left m-b-0\">Thank you.</p> -->\n                                    <!-- <p class=\"text-inverse text-left\"><a [routerLink]=\"['/dashboard/default']\"><b>Back to website</b></a></p> -->\n                                </div>\n                                <div class=\"col-md-4\">\n                                    <img src=\"assets/images/comp.png\" alt=\"small-logo.png\">\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            </div>\n            <!-- end of col-sm-12 -->\n        </div>\n        <!-- end of row -->\n    </div>\n    <!-- end of container-fluid -->\n</section>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ResetpasswordComponent } from './resetpassword.component';\nimport {ResetpasswordRoutingModule} from './resetpassword-routing.module';\nimport {SharedModule} from '../../../shared/shared.module';\nimport { FormsModule } from '@angular/forms';\nimport { NgPasswordValidatorModule } from 'ng-password-validator';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ResetpasswordRoutingModule,\n    SharedModule,\n    FormsModule,\n    NgPasswordValidatorModule\n  ],\n  declarations: [ResetpasswordComponent]\n})\nexport class ResetpasswordModule { }\n"],"sourceRoot":"webpack:///"}