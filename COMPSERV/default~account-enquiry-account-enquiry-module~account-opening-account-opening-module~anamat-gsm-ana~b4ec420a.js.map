{"version":3,"sources":["./src/app/theme/button.directive.ts","./src/app/theme/date-validation.directive.ts","./src/app/theme/edit.directive.ts","./src/app/theme/shortcut-key/shortcut-key.component.ts","./src/app/theme/shortcut-key/shortcut-key.component.html","./src/app/theme/submit.directive.ts","./src/app/theme/theme.directive.ts","./src/app/theme/theme.module.ts"],"names":[],"mappings":"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","file":"default~account-enquiry-account-enquiry-module~account-opening-account-opening-module~anamat-gsm-ana~b4ec420a.js","sourcesContent":["import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appButton]'\r\n})\r\nexport class ButtonDirective {\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2,\r\n    private elementRef: ElementRef,) { }\r\n\r\n  @HostListener('focusout')\r\n\r\n  onFormSubmit() {\r\n\r\n    \r\n    const invalidControl11 = this.el.nativeElement;\r\n    // if(invalidControl11.tagName == 'BUTTON'){\r\n    //   const invalidControl = this.el.nativeElement.querySelector('.ng-invalid');\r\n    //   if (invalidControl) {\r\n    //     invalidControl.focus();\r\n    //   }\r\n\r\n    // }\r\n    if (invalidControl11.tagName == 'INPUT') {\r\n      // if (invalidControl11.className == \"ng-invalid\") {\r\n        \r\n\r\n        // this.renderer.addClass(this.elementRef.nativeElement, 'ng-valid');  \r\n        this.renderer.removeClass(this.elementRef.nativeElement, 'ng-invalid');\r\n      \r\n\r\n        // invalidControl11.className == \"form-control ng-valid ng-untouched \"\r\n      // }\r\n    }\r\n\r\n  }\r\n\r\n}\r\n","import {Directive, ElementRef, HostListener, Input, OnInit,Renderer2  } from '@angular/core';\r\nimport { FormControl, NgControl, NgModel } from '@angular/forms';\r\nimport * as moment from 'moment';\r\n\r\n@Directive({\r\n  selector: '[appDateValidation]'\r\n})\r\n\r\nexport class  DateValidationDirective  {\r\n  @Input() formControl: FormControl;\r\n  invalidControl: any;\r\n  constructor(private el: ElementRef, private renderer: Renderer2) {}\r\n\r\n   todate: any; \r\n  @HostListener('focusout')\r\n\r\n  onfocusout() {\r\n    // debugger\r\n    let invalidControl = this.el.nativeElement;\r\n    invalidControl.value=invalidControl.value\r\n    // invalidControl.value.setValue(invalidControl.value);\r\n    // invalidControl.markAsValid();\r\n    // if (invalidControl.value) {\r\n    //   invalidControl.add('ng-valid');\r\n    // }\r\n    // this.todate=invalidControl.value;\r\n    if (invalidControl.classList.contains('ng-invalid')) {\r\n      \r\n      // this.invalidControl.setValue(this.todate.value);\r\n      // let currentDate = new Date();\r\n      // invalidControl.value = currentDate;\r\n      // invalidControl.value = this.todate;\r\n      invalidControl.classList.remove('ng-invalid');\r\n      invalidControl.classList.add('ng-valid');\r\n    } \r\n   \r\n  }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // angForm: any;\r\n  // private ngModel: NgModel;\r\n  // private showErrorMessage: boolean = false;\r\n  // private errorMessage: string = '';\r\n  //  errorMessage: string;\r\n  // // angForm: any;\r\n  // showErrorMessage: boolean;\r\n  // currentDate: any;\r\n  // systemParameter: any;\r\n  // @Input() currentDate!: Date;\r\n\r\n  // constructor(private elementRef: ElementRef) {}\r\n\r\n  // @HostListener('change', ['$event'])\r\n  // onDateChange(event: any) {\r\n  //   const enteredDate = new Date(event.target.value);\r\n  //   if (enteredDate > this.currentDate) {\r\n  //     event.target.value = this.currentDate.toLocaleDateString();\r\n  //   }\r\n  // }\r\n  //\r\n\r\n  // constructor(private el: ElementRef) {}\r\n\r\n  // @HostListener('input', ['$event'])\r\n  // onInputEvent(event: Event) {\r\n  //   // const enteredDate = new Date(event.target.value);\r\n  //   const enteredDate = new Date(this.el.nativeElement.value);\r\n  //   const currentDate = new Date();\r\n  //   const updatedDate = this.getValidDate(enteredDate, currentDate);\r\n\r\n  //   this.ngModel.control.setValue(updatedDate);\r\n  //   this.showErrorMessage = false;\r\n  //   this.errorMessage = (enteredDate > currentDate) ? 'Only the current date is allowed.' : '';\r\n  // }\r\n\r\n  // setToCurrentDateIfFuture() {\r\n  //   const currentDate = new Date();\r\n  //   const startDateControl = this.angForm.controls['START_DATE'];\r\n  \r\n  //   if (startDateControl.value > currentDate) {\r\n  //     startDateControl.setValue(currentDate);\r\n  //   }\r\n  // }\r\n\r\n  // constructor(private el: ElementRef) {}\r\n\r\n  // @HostListener('blur') onBlur() {\r\n  //   const currentDate = new Date();\r\n  //   const enteredDate = new Date(this.el.nativeElement.value);\r\n\r\n  //   if (enteredDate > currentDate) {\r\n  //     this.el.nativeElement.value = currentDate.toISOString().substring(0, 10);\r\n  //   }\r\n  // }\r\n\r\n \r\n\r\n  \r\n\r\n  // @Input('appDateValidation') validationType: string;\r\n  // constructor(private ngControl: NgControl) {}\r\n  // @HostListener('input')\r\n  // onInput() {\r\n  //   const currentDate = new Date();\r\n  //   const enteredDate = new Date(this.ngControl.value);\r\n    \r\n  //   const updatedDate = this.getValidDate(enteredDate, currentDate);\r\n    \r\n  //   this.ngControl.control.setValue(updatedDate);\r\n  //   // this.toggleErrorMessage(enteredDate > currentDate);\r\n  // }\r\n\r\n  // private getValidDate(enteredDate: Date, currentDate: Date): Date {\r\n  //   return enteredDate > currentDate ? currentDate : enteredDate;\r\n  // }\r\n\r\n  // private toggleErrorMessage(show: boolean) {\r\n  //   const control = this.ngControl.control;\r\n  //   const errors = control.errors || {};\r\n\r\n  //   if (show) {\r\n  //     errors['dateError'] = true;\r\n  //   } else {\r\n  //     delete errors['dateError'];\r\n  //   }\r\n\r\n  //   control.setErrors(Object.keys(errors).length === 0 ? null : errors);\r\n  // }\r\n\r\n\r\n\r\n//  updateEndDate() {\r\n//       const currentDate = new Date();\r\n//       const enteredDate = new Date(this.angForm.controls['END_DATE'].value);\r\n//       this.angForm.setDate(this.currentDate.getDate());\r\n//       const updatedDate = this.getValidDate(enteredDate, currentDate);\r\n    \r\n//       this.angForm.controls['END_DATE'].setValue(updatedDate);\r\n//       this.showErrorMessage = false;\r\n//       this.errorMessage = (enteredDate > currentDate) ? 'Only the current date is allowed.' : '';\r\n//     }\r\n//     updateEndDate1() {\r\n//       const currentDate = new Date();\r\n//             const enteredDate1 = new Date(this.angForm.controls['START_DATE'].value);    \r\n//       const updatedDate1 = this.getValidDate(enteredDate1, currentDate);\r\n    \r\n//       this.angForm.controls['START_DATE'].setValue(updatedDate1);\r\n//       this.showErrorMessage = false;\r\n//       this.errorMessage = (enteredDate1 > currentDate) ? 'Only the current date is allowed.' : '';\r\n//     }\r\n    \r\n//     getValidDate(enteredDate: Date, currentDate: Date): Date {\r\n//       return (enteredDate > currentDate) ? currentDate : enteredDate;\r\n//     }\r\n\r\n    // this.maxDate = new Date();\r\n    // this.maxDate.setDate(this.maxDate.getDate());\r\n    // this.systemParameter.getFormData(1).subscribe(data => {\r\n    //   this.maxDate = moment(data.CURRENT_DATE, 'DD/MM/YYYY')\r\n    //   this.maxDate = this.maxDate._d\r\n    //   // if (this.maxDate = moment(data.CURRENT_DATE, 'DD/MM/YYYY'))\r\n    //   // {\r\n    //   //   this.el.nativeElement.className = \"form-control ng-untouched ng-valid\"\r\n    //   // };\r\n\r\n    // })\r\n\r\n\r\n// @Input() appDateValidation: string;\r\n\r\n// constructor(private ngControl: NgControl) { }\r\n\r\n// @HostListener('input')\r\n// onInput() {\r\n//   const currentDate = new Date();\r\n//   const enteredDate = new Date(this.ngControl.value);\r\n\r\n//   if (this.appDateValidation === 'start') {\r\n//     this.toggleErrorMessage(enteredDate > currentDate);\r\n//   }\r\n// }\r\n\r\n// private toggleErrorMessage(show: boolean) {\r\n//   const control = this.ngControl.control;\r\n//   const errors = control.errors || {};\r\n\r\n//   if (show) {\r\n//     errors['dateError'] = false;\r\n//   } else {\r\n//     delete errors['dateError'];\r\n//   }\r\n\r\n//   control.setErrors(Object.keys(errors).length === 0 ? null : errors);\r\n// }\r\n// }\r\n","import { Directive, ElementRef, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appEdit]'\r\n})\r\nexport class EditDirective {\r\n\r\n  private focus = true;\r\n\r\n  constructor(private el: ElementRef) { }\r\n\r\n   ngOnInit()\r\n    {\r\n        if (this.focus)\r\n        {\r\n            //Otherwise Angular throws error: Expression has changed after it was checked.\r\n            window.setTimeout(() =>\r\n            {\r\n                this.el.nativeElement.focus(); //For SSR (server side rendering) this is not safe. Use: https://github.com/angular/angular/issues/15008#issuecomment-285141070)\r\n            });\r\n        }\r\n    }\r\n\r\n    // @Input() set autofocus(condition: boolean)\r\n    // {\r\n    //     this.focus = condition !== false;\r\n    // }\r\n  // @HostListener('click')\r\n\r\n  // onSubmit(){\r\n\r\n  // }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-shortcut-key',\r\n  templateUrl: './shortcut-key.component.html',\r\n  styleUrls: ['./shortcut-key.component.scss']\r\n})\r\nexport class ShortcutKeyComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<p>shortcut-key works!</p>\r\n \r\n","import { Directive, ElementRef, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appSubmit]' \r\n})\r\nexport class SubmitDirective {\r\n\r\n  constructor(private el: ElementRef) { }\r\n\r\n  // @HostListener('click')\r\n  // @HostListener('keydown.Tab')\r\n  // @HostListener('keydown.shift.Tab')\r\n  onFormSubmit() {\r\n\r\n    //////OLD CODE\r\n    const invalidControl = this.el.nativeElement.querySelector('.ng-invalid');\r\n    if (invalidControl) {\r\n      invalidControl.focus();\r\n    }\r\n    // if (invalidControl.tagName == 'INPUT') {\r\n    //   if (invalidControl.value == '') {\r\n    //     invalidControl.focus();\r\n    //   }\r\n    // } else if (invalidControl.tagName === 'NG-SELECT') {\r\n    //   if (invalidControl.textContent == \"\") {\r\n    //     invalidControl.focus();\r\n    //     return;\r\n    //   }\r\n    // } else if (invalidControl.tagName == 'SPAN') {\r\n    //   if (invalidControl.id == 'editbutton') {\r\n    //     invalidControl.focusout();\r\n    //   }\r\n    // }\r\n    // else if (invalidControl.tagName == 'TEXTAREA') {\r\n    //   if (invalidControl.value == '') {\r\n    //     invalidControl.focus();\r\n    //   }\r\n    // }\r\n\r\n  }\r\n\r\n}\r\n","import { AfterViewInit,EventEmitter ,Output, ContentChild, ContentChildren, Directive, ElementRef, HostListener, QueryList, ViewChild } from '@angular/core';\r\nimport { ControlContainer } from '@angular/forms';\r\nimport { NgSelectComponent } from \"@ng-select/ng-select\";\r\nimport { event } from 'jquery';\r\nimport { InvoiceListComponent } from './extension/invoice/invoice-list/invoice-list.component';\r\n\r\n@Directive({\r\n  selector: '[appTheme]' \r\n})\r\nexport class ThemeDirective {\r\n  @ContentChild(NgSelectComponent) select: NgSelectComponent;\r\n  @ContentChildren(NgSelectComponent) ngselect: QueryList<NgSelectComponent>;\r\n\r\n  @ViewChild('myNgSelect') myNgSelect: ElementRef;\r\n  @ViewChild('myInput') myInput: ElementRef;\r\n  @ViewChild('myTextarea') myTextarea: ElementRef;\r\n\r\n  @Output() appFocusout = new EventEmitter<void>();\r\n  @Output() appClick = new EventEmitter<void>();\r\n  constructor(private el: ElementRef) { }\r\n  //  @HostListener(\"click\", ['$event'])\r\n  //   @HostListener(\"keydown\", ['$event'])\r\n  // @HostListener(\"mousedown\", ['$event'])\r\n  // @HostListener('keydown.tab', ['$event'])\r\n  // @HostListener('keydown.shift.Tab', ['$event'])\r\n  // @HostListener(\"click\", ['$event'])\r\n  // @HostListener('keydown.tab', ['$event'])\r\n  @HostListener(\"focusout\")\r\n  //  @HostListener(\"focusout\", ['$event'])\r\n  // @HostListener('document:keypress', ['$event'])\r\n  // onFocusOut() {\r\n  //   this.appFocusout.emit();\r\n  // }\r\n  // onclick() {\r\n  //   this.appClick.emit();\r\n  // }\r\n  onFormSubmit(event) {\r\n    \r\n    // debugger\r\n    const invalidControl = this.el.nativeElement;\r\n    // if (event.type == 'mousedown' || invalidControl.id == 'editbutton') {\r\n    //   invalidControl.focusout()\r\n    // }\r\n    \r\n    if (invalidControl.tagName == 'INPUT') {\r\n      if (invalidControl.value == '') {\r\n        // alert(\"Hello Theme\");\r\n        invalidControl.focus();\r\n      }\r\n      //  else \r\n      //  if(invalidControl.value == '') {\r\n      //     invalidControl.focus();\r\n      //  }\r\n    } else if (invalidControl.tagName === 'NG-SELECT') {\r\n      if (invalidControl.textContent == \"\") {\r\n\r\n        invalidControl.focus();\r\n\r\n        // this.select.focus()\r\n        // // this.tagName.focus()\r\n\r\n        return;\r\n      }\r\n\r\n      if (event.type != 'mousedown' || invalidControl.id != 'editbutton') {\r\n      } else if (invalidControl.tagName == 'SPAN') {\r\n\r\n        if (invalidControl.id == 'editbutton') {\r\n          invalidControl.focus();\r\n        }\r\n      }\r\n      else if (invalidControl.tagName == 'TEXTAREA') {\r\n        if (invalidControl.value == '') {\r\n          invalidControl.focus();\r\n        }\r\n      }\r\n      if (this.el.nativeElement.contains(document.activeElement)) {\r\n        return;\r\n      } invalidControl.focus();\r\n    }\r\n    else {\r\n\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ThemeDirective } from './theme.directive';\r\nimport { SubmitDirective } from './submit.directive';\r\nimport { ButtonDirective } from './button.directive';\r\nimport { ShortcutKeyComponent } from './shortcut-key/shortcut-key.component';\r\nimport { EditDirective } from './edit.directive';\r\nimport { DateValidationDirective } from './date-validation.directive';\r\n\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [ThemeDirective, SubmitDirective, ButtonDirective, ShortcutKeyComponent, EditDirective, DateValidationDirective],\r\n  exports: [ThemeDirective, SubmitDirective, ButtonDirective, DateValidationDirective],\r\n\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class ThemeModule { }\r\n"],"sourceRoot":"webpack:///"}